#!/usr/bin/env fildesh

# Usage:
#   cd /pathto/homework/section
#   printhw.fildesh
# Specify files_to_print, names_file, and printer
# as HERE docs in labconf.fildesh.
# Printing is disabled for safe testing, search for "enscript" to enable.

# This code prints students' program outputs and java source codes without
# using a terrible amount of paper. Each single student's files are
# concatenated into a single file separated by form feed (page break)
# characters. This makes different original files print on different pages.
#
# This allows 2 columns on a side of paper to contain different file contents.
# It is essentially getting around a limitation with /enscript/.
#
# Student codes and outputs are assumed to be layed out as such:
#   D.<username>/Problem<X>.java
#              |/output

$(<< labconf.fildesh)

## Begin sub-fildesh program.
$(H perstudent)
$(<< labconf.fildesh)

$(H find_args_script)
BEGIN {
    print_or = 0;
}
{
    if (print_or)  print "-or";
    print_or = 1;
    print "-name";
    print $0;
}
$(H find_args_script)
 $(O files) awk -- $(H find_args_script) $(XF files_to_print)

 $(O nameline) tee $(OF a)
$(XO a) cut -f1
$(XO a) sed 's/\(.*\)/D.\1/'
$(X files) $(O to_tmp) \
    xargs -d '\n' find $(XA a) -type f

$(H script)
BEGIN {
    firstline = "";
    lines = "";
}
/output$/ {
    firstline = gensub ("^[^ ]* ", "", "", $0);
    next;
}
{
    lines = lines gensub ("^([^ ]*) ", "\n\\1\n", "", $0);
}
END {
    printf "%s%s", firstline, lines;
}
$(H script)

$(Xv up_a) $(O a) awk -- $(H script)
$(XO a) xargs cat

# TODO: Why is this needed?
$(XO a) tail -n +2

$(XO nameline) sed 's/^\(.*\)\t\(.*\), \(.*\)$/###### \1 - \3 \2 ######/'
$(XO a) cat $(XF nameline) -

# Swap comments to actually print!
$(X a) cat -
#enscript $(X a) -G -2r -T 4 -Dduplex:true -P $(H printer)

# Keep the rest of the lines in /perstudent/ below other stuff.
#
# There is a temporary file created for the page break,
# it can't be cleaned up too quickly.
# Ideally, the temp file would be passed down as an argument to xpipe,
# which would be cleaned up when xpipe finished...
# but fildesh scripts don't have a concept of arguments yet.
$(H page_break)

$(H page_break)
$(X to_tmp) $(O^ up_a) \
    xargs -ifile echo $(XF page_break) file

$(H perstudent)
## End sub-fildesh program.


 $(O a) ls
$(XO a) grep '^D\.'
$(XO a) grep -o '[^\.]*$'
$(XO a) ujoin -x-lut $(H names_file)

#$(X a) cat -
#$(XO a) head -n1
$(X a) xpipe fildesh -- $(H perstudent)

